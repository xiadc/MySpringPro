package com.lab.stcube.model;

import java.util.*;

import javax.xml.transform.Source;

import org.geotools.data.DataUtilities;
import org.geotools.feature.SchemaException;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.feature.simple.SimpleFeatureTypeBuilder;
import org.geotools.geometry.jts.JTS;
import org.geotools.geometry.jts.JTSFactoryFinder;
import org.geotools.referencing.CRS;
import org.geotools.referencing.crs.DefaultGeographicCRS;
import org.opengis.feature.simple.*;
import org.opengis.feature.type.FeatureType;
import org.opengis.geometry.MismatchedDimensionException;
import org.opengis.referencing.FactoryException;
import org.opengis.referencing.NoSuchAuthorityCodeException;
import org.opengis.referencing.crs.CoordinateReferenceSystem;
import org.opengis.referencing.operation.MathTransform;
import org.opengis.referencing.operation.TransformException;

import com.mchange.v1.util.ArrayUtils;
import com.vividsolutions.jts.geom.*;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;


/**
 * 
 */
public class SpatioTemporalFeature {

  

	/**
     * Default constructor
     */
    public SpatioTemporalFeature() {
    }
    
	/**
     * Default constructor
	 * @throws FactoryException 
	 * @throws SchemaException 
	 * @throws NoSuchAuthorityCodeException 
     */
    public SpatioTemporalFeature(String typeSpec,GeomTypeEnum geomType,String epsgCode) throws NoSuchAuthorityCodeException, SchemaException, FactoryException {
    	setFeatureType(typeSpec,geomType,epsgCode);
    }
    
    /**
     * 
     */
    private TimePeriod m_timePeriod;

    /**
     * 
     */
    private SimpleFeature m_feature;

    /**
     * 
     */
    private long m_stId;
    
    /**
     * @return
     */
    public void setFeatureType(SimpleFeatureType type) {
        // TODO implement here
    	SimpleFeatureBuilder builder = new SimpleFeatureBuilder(type);  
    	//m_typeBuilder.setCharset(Charset.forName("GBK"));  
    	m_feature=builder.buildFeature( "ttt" );
        return;
    } 
    
    /**
     * @return
     * @throws SchemaException 
     * @throws FactoryException 
     * @throws NoSuchAuthorityCodeException 
     */
    public void setFeatureType(String typeSpec,GeomTypeEnum geomType,String epsgCode) throws SchemaException, NoSuchAuthorityCodeException, FactoryException{
        // TODO implement here
    	
    	SimpleFeatureType originalType = DataUtilities.createType("t1","the_geom:"+geomType.toString()+":srid="+epsgCode.split(":")[1]+","+typeSpec);
    	
    	SimpleFeatureBuilder builder = new SimpleFeatureBuilder(originalType);  
    	m_feature=builder.buildFeature("");
        return;
    } 
    public void setFeatureType(String typeSpec,GeomTypeEnum geomType) throws SchemaException, NoSuchAuthorityCodeException, FactoryException{
        // TODO implement here
    	setFeatureType(typeSpec, geomType, "EPSG:4326");
        return;
    } 
    
    /**
     * @return
     */
    public SimpleFeatureType getFeatureType() {
        // TODO implement here
        return m_feature.getFeatureType();
    } 
   
    

    /**
     * @return
     */
    public TimePeriod getTimePeriod() {
        // TODO implement here
        return m_timePeriod;
    }
    
    public void setTimePeriod(TimePeriod tp) {
        // TODO implement here
        m_timePeriod=tp;
    	return;
    }
    
    public void setTimePeriod(String bg) {
        // TODO implement here
        m_timePeriod=new TimePeriod(bg);
    	return;
    }
    
    public void setTimePeriod(String bg,String format) {
        // TODO implement here
        m_timePeriod=new TimePeriod(bg,format);
    	return;
    }
    
    public void setTimePeriod(String bg,String ed,String format) {
        // TODO implement here
        m_timePeriod=new TimePeriod(bg,ed,format);
    	return;
    }

    /**
     * @return
     */
    public SimpleFeature getFeature() {
        // TODO implement here
        return m_feature;
    }

    /**
     * @return
     */
    public void setStId(Long id) {
        // TODO implement here
    	m_stId=id;
    }
    
    /**
     * @return
     */
    public Long getStId() {
        // TODO implement here
        return m_stId;
    }

    /**
     * @param String 
     * @return
     */
    public Object getAttribute(String name) {
        // TODO implement here
        return m_feature.getAttribute(name);
    }

    /**
     * @param String 
     * @param Object 
     * @return
     */
    public void setAttribute(String key,Object value) {
        // TODO implement here
    	m_feature.setAttribute(key, value);
        return;
    }
    
    public void setAttributes(Object[] objs) {
    	m_feature.setAttributes(Arrays.asList(objs));
    	return;
	}

    /**
     * @return
     */
    public String getGeometryType() {
        // TODO implement here
    	String[] strs = m_feature.getDefaultGeometry().getClass().toString().split("\\.");
        return strs[strs.length-1];
    }

    /**
     * @param String   
     * @throws ParseException 
     */
    public void setGeometry(String wktStr) throws ParseException {
        // TODO implement here    
  	  GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory();
  	  WKTReader reader = new WKTReader( geometryFactory );
  	  m_feature.setDefaultGeometry(reader.read(wktStr));
  	/*   
  	  switch (geoType) {
  	  case "Point":m_feature.setDefaultGeometry(reader.read(wktStr));break;
      case "LingString":m_feature.setDefaultGeometry(reader.read(wktStr));break;
  	  case "Polygon":m_feature.setDefaultGeometry(reader.read(wktStr));break;
  	  case "LineaRing":m_feature.setDefaultGeometry(reader.read(wktStr));break;
  	  default:break;
  	  }
  	 */ 
    }
    
    public void setGeometry(Geometry geom){
    	m_feature.setDefaultGeometry(geom);
    }

    /**
     * @return
     */
    public Object getGeometry() {
        // TODO implement here
        return m_feature.getDefaultGeometry();
    }

    /**
     * @return
     * @throws FactoryException 
     * @throws NoSuchAuthorityCodeException 
     */
    public CoordinateReferenceSystem getCRS(){
        // TODO implement here
      //  return m_feature.getFeatureType().getCoordinateReferenceSystem();// .toString();
        return m_feature.getDefaultGeometryProperty().getDescriptor().getCoordinateReferenceSystem();
    	//return m_CRS;
    	//--坐标参考系设置有误--
    	//return CRS.decode("EPSG:"+((Geometry)m_feature.getDefaultGeometry()).getSRID()) ;
    	//return null;
    }

    /**
     * @param String
     * @throws FactoryException 
     * @throws NoSuchAuthorityCodeException 
     * @throws TransformException 
     * @throws MismatchedDimensionException 
     */
    public void changeCRS(String epsg) throws NoSuchAuthorityCodeException, FactoryException, MismatchedDimensionException, TransformException {
        // TODO implement here
    	CoordinateReferenceSystem targetCRS = CRS.decode(epsg);
    	//CoordinateReferenceSystem sourceCRS = getCRS();
    	//坐标转化
    	MathTransform tf = CRS.findMathTransform(getCRS(), targetCRS); //m_feature.getDefaultGeometry(); 	
    	m_feature.setDefaultGeometry(JTS.transform((Geometry)m_feature.getDefaultGeometry(),tf));
    }

    
    public static void main(String[] args) throws Exception {  	
    	  System.out.println("test hello geotools");
          
    	  //示例1
    	  SpatioTemporalFeature stFtest1=new SpatioTemporalFeature();
    	  stFtest1.setFeatureType("field1:Integer,field2:String",GeomTypeEnum.Point,"epsg:4326");  //
    	  
          //stFtest1.setAttribute("field1", null);
    	  stFtest1.setAttribute("field1", 121121);
    	  stFtest1.setAttribute("field2", "第一种");
    	 
    	  stFtest1.setTimePeriod("2012/6/12", "yyyy/mm/dd");

    	  stFtest1.setGeometry("POINT (113 23)");
    	  
     	  stFtest1.changeCRS("epsg:3857");  //重设参考坐标系
    	  
    	  System.out.println("1111test1 over---"+stFtest1.getCRS()+"---"+stFtest1.getGeometry()+"--"+stFtest1.getAttribute("the_geom"));
        //  m_builder = new SimpleFeatureBuilder(m_typeBuilder.buildFeatureType());  
    	  //m_typeBuilder.setCharset(Charset.forName("GBK"));  
    	  //m_feature=m_builder.buildFeature( "ttt" );
    	 
    	  SpatioTemporalFeature stFtest2=new SpatioTemporalFeature();
    	  stFtest2.setFeatureType(stFtest1.getFeatureType());  //
    	  
          //stFtest1.setAttribute("field1", null);
    	  stFtest2.setAttributes(new Object[]{null,23333,"第二种"});  	 
    	  stFtest2.setTimePeriod("2012/6/12", "yyyy/mm/dd");
    	  stFtest2.setGeometry("POINT (113 23)");
    	  
    	  System.out.println("2222test1 over---"+stFtest2.getCRS()+"---"+stFtest2.getGeometry()+"--"+stFtest2.getAttribute("the_geom"));
    	  
    }
    
}